name: Build
description: 'Builds all packages and creates shareable artifacts for testing'

on:
  workflow_call:
    # Make this a reusable workflow, no value needed
    # https://docs.github.com/en/actions/using-workflows/reusing-workflows
    inputs:
      os:
        description: 'OS of runner'
        default: 'ubuntu-latest'
        type: string
    outputs:
      build_id:
        description: 'Unique identifier for this build'
        value: ${{ jobs.build.outputs.build_id }}
      build_date:
        description: 'Timestamp when the build completed'
        value: ${{ jobs.build.outputs.build_date }}
      artifact_size:
        description: 'Size of the build artifact in bytes'
        value: ${{ jobs.build.outputs.artifact_size }}
      cache_key:
        description: 'Cache key used for artifact uploads, can be passed to download actions'
        value: ${{ jobs.build.outputs.cache_key }}
      service_package:
        description: 'Path to the packaged service file'
        value: ${{ jobs.build.outputs.package_file }}

env:
  TURBO_TELEMETRY_DISABLED: 1

jobs:
  # This job builds all packages in the monorepo
  # It runs on the specified OS (default: ubuntu-latest)
  # Only Linux builds create artifacts that are shared with other jobs
  build:
    name: Build
    runs-on: ${{ inputs.os }}
    outputs:
      build_id: ${{ steps.build-info.outputs.build_id }}
      build_date: ${{ steps.build-info.outputs.build_date }}
      artifact_size: ${{ steps.upload-archive.outputs.size || '0' }}
      cache_key: ${{ steps.upload-archive.outputs.cache_key }}
      package_file: ${{ steps.package-service.outputs.package_file }}
    steps:
      # Standard checkout with SSH key for private repositories
      - name: üë∑ Checkout Repository
        uses: actions/checkout@v4
        with:
          ssh-key: ${{ secrets.DEPLOY_KEY }}

      # Set up Node.js and PNPM using the reusable action
      - name: üõ†Ô∏è Setup Development Environment
        uses: ./.github/workflows/actions/setup-workspace
        with:
          node-version: '20'

      # Generate build information for tracking
      - name: üìä Generate Build Information
        id: build-info
        shell: bash
        run: |
          echo "build_id=$(date +%s)-${{ github.run_id }}" >> $GITHUB_OUTPUT
          echo "build_date=$(date -u +"%Y-%m-%dT%H:%M:%SZ")" >> $GITHUB_OUTPUT

      # Build all packages using Turbo
      # This creates the dist/ directories with compiled code
      - name: üèóÔ∏è Build All Packages
        run: |
          echo "Building packages with diagnostic output..."
          echo "Workspace directory structure:"
          find packages -type d -maxdepth 2 | sort

          echo "Building all packages in correct dependency order..."
          pnpm run build

          echo "Verifying build output:"
          find packages -name "dist" -type d | sort
        shell: bash

      # Package the service once to be reused in e2e tests
      - name: üì¶ Package Service
        shell: bash
        id: package-service
        run: |
          echo "Creating service package..."
          mkdir -p packaged-service
          cd packages/wdio-electron-service
          PACKAGE_FILE=$(pnpm pack | tail -n 1)
          echo "Created package: $PACKAGE_FILE"

          # Move the package to the packaged-service directory
          mv "$PACKAGE_FILE" ../../packaged-service/
          echo "package_file=packaged-service/$PACKAGE_FILE" >> $GITHUB_OUTPUT
          cd ../..

          echo "Service package created at: packaged-service/$PACKAGE_FILE"
          ls -la packaged-service

          # Create a debug file to help with extraction verification
          echo "PACKAGE_PATH=packaged-service/$PACKAGE_FILE" > packaged-service/package-info.txt
          echo "BUILD_ID=${{ github.run_id }}" >> packaged-service/package-info.txt

      # Install all dependencies in packages
      - name: üì¶ Install Package Dependencies
        shell: bash
        run: |
          echo "Installing all dependencies to ensure node_modules are populated..."
          pnpm install --frozen-lockfile || pnpm install

          # Also install in each package directory individually to ensure all dependencies are resolved
          echo "Verifying dependencies in each package directory..."
          find packages -maxdepth 1 -type d | grep -v "^packages$" | while read package_dir; do
            package_name=$(basename "$package_dir")
            echo "Verifying dependencies for $package_name..."
            if [ ! -d "$package_dir/node_modules" ] || [ -z "$(ls -A "$package_dir/node_modules" 2>/dev/null)" ]; then
              echo "Installing missing dependencies for $package_name..."
              (cd "$package_dir" && pnpm install --frozen-lockfile || pnpm install)
            fi
          done

          # Also install in e2e directory
          echo "Verifying dependencies in e2e directory..."
          if [ ! -d "e2e/node_modules" ] || [ -z "$(ls -A "e2e/node_modules" 2>/dev/null)" ]; then
            echo "Installing missing dependencies in e2e directory..."
            (cd e2e && pnpm install --frozen-lockfile || pnpm install)
          fi

      # Extract the artifact contents for verification
      - name: üß™ Extract Artifact for Verification
        if: ${{ runner.os == 'Linux' }}
        shell: bash
        run: |
          echo "=============== EXTRACTING ARTIFACT CONTENTS ==============="
          # Create the base directory structure
          mkdir -p wdio-electron-service-build/packages

          # Copy dist directories
          echo "Copying all package dist directories..."
          find packages -maxdepth 1 -type d | grep -v "^packages$" | while read package_dir; do
            package_name=$(basename "$package_dir")
            # Create directory for this package
            mkdir -p "wdio-electron-service-build/packages/$package_name"

            # Copy dist if it exists
            if [ -d "$package_dir/dist" ]; then
              echo "Copying dist directory for $package_name..."
              cp -r "$package_dir/dist" "wdio-electron-service-build/packages/$package_name/"
              echo "‚úÖ Copied dist directory for $package_name"
            else
              echo "üìù No dist directory found for $package_name"
            fi

            # Copy node_modules if it exists
            if [ -d "$package_dir/node_modules" ]; then
              echo "Copying node_modules for $package_name..."
              cp -r "$package_dir/node_modules" "wdio-electron-service-build/packages/$package_name/"
              echo "‚úÖ Copied node_modules for $package_name"
            fi
          done

          # Copy e2e directory node_modules if it exists
          if [ -d "e2e/node_modules" ]; then
            echo "Copying e2e node_modules..."
            mkdir -p "wdio-electron-service-build/e2e"
            cp -r "e2e/node_modules" "wdio-electron-service-build/e2e/"
            echo "‚úÖ Copied e2e node_modules"
          fi

          # Copy packaged-service directory
          if [ -d "packaged-service" ]; then
            cp -r packaged-service wdio-electron-service-build/
            echo "‚úÖ Copied packaged-service directory"
          else
            echo "‚ùå packaged-service directory not found"
          fi

          echo "Contents of the extracted artifact directory:"
          ls -la wdio-electron-service-build

          if [ -d "wdio-electron-service-build/packaged-service" ]; then
            echo "‚úÖ packaged-service directory was copied successfully"
            ls -la wdio-electron-service-build/packaged-service
          else
            echo "‚ùå Failed to copy packaged-service directory"
          fi

      # Upload build artifacts, but only from Linux
      # This is because Linux builds are most consistent and used by all other jobs
      # The artifacts include all dist/ and cjs/ directories from all packages
      # Using GitHub Actions cache with ~90 day retention (vs. 1 day for regular artifacts)
      - name: üì¶ Upload Package Build Artifacts
        id: upload-archive
        if: ${{ runner.os == 'Linux' }}
        uses: ./.github/workflows/actions/upload-archive
        with:
          name: wdio-electron-service
          output: wdio-electron-service-build/artifact.zip
          paths: 'wdio-electron-service-build'
          cache_key_prefix: wdio-electron-build
          retention_days: '90'
