name: Prepare Release

on:
  workflow_call:
    inputs:
      target_branch:
        description: 'Target branch to prepare release from'
        required: true
        type: string
      next_lts_branch:
        description: 'Next LTS branch name'
        required: true
        type: string
      release_version:
        description: 'Release type (patch, minor, major, prepatch, preminor, premajor, prerelease)'
        required: true
        type: string
      dry_run:
        description: 'Do not touch or write anything. Show the commands.'
        required: true
        default: false
        type: boolean
      branch_type:
        description: 'Branch type (main, feature, maintenance)'
        required: true
        type: string
    secrets:
      github_bot_token:
        description: 'GitHub token for authentication'
        required: true
      deploy_key:
        description: 'SSH deploy key for pushing to the repository'
        required: true

jobs:
  prepare:
    runs-on: ubuntu-latest
    steps:
      - name: üë∑ Checkout target branch
        uses: actions/checkout@v4
        with:
          ssh-key: ${{ secrets.deploy_key }}
          ref: ${{ inputs.target_branch }}
          fetch-depth: 0 # Full history needed for versioning

      - name: üõ†Ô∏è Setup workspace
        uses: ./.github/workflows/actions/setup-workspace
        with:
          node-version: '20'

      - name: üîÑ Update dependabot configuration
        # Update dependabot config for major releases, but not for prereleases
        if: ${{ contains(inputs.release_version, 'major') && !contains(inputs.release_version, 'pre') }}
        shell: bash
        env:
          NEW_LTS_BRANCH: ${{ inputs.next_lts_branch }}
          CONFIG_DEPENDABOT: '.github/dependabot.yml'
        run: |
          echo '::group::Updating the configuration of dependabot'
          # Update the target-branch in dependabot.yml to point to the new LTS branch
          yq e "(.. | select(has(\"target-branch\"))
                    | select(.[\"target-branch\"]
                    | test(\"^v[0-9]+$\"))).target-branch = \"${NEW_LTS_BRANCH}\"" \
            -i "${CONFIG_DEPENDABOT}"

          if git diff --exit-code --quiet "${CONFIG_DEPENDABOT}"; then
            echo "No changes detected."
            exit 0
          fi

          echo "Update branch name for LTS(New value: ${NEW_LTS_BRANCH})."
          git diff "${CONFIG_DEPENDABOT}"
          echo '::endgroup::'

          echo '::group::Committing changes'
          git add "${CONFIG_DEPENDABOT}"
          git commit -F-<<EOF
          chore: update dependabot.yml

          Update branch name for LTS (new value: ${NEW_LTS_BRANCH})
          [skip ci]
          EOF
          git show
          git push --no-verify
          echo '::endgroup::'

      - name: üîÑ Merge feature branch to main
        if: ${{ contains(inputs.release_version, 'major') && !contains(inputs.release_version, 'pre') && !inputs.dry_run && startsWith(inputs.target_branch, 'feature/') }}
        shell: bash
        run: |
          echo "::group::Merging feature branch to main"

          # Ensure we have the latest main branch
          git fetch origin main

          # Check if we're on a feature branch
          if [[ "${{ inputs.target_branch }}" == feature/* ]]; then
            echo "We are on feature branch ${{ inputs.target_branch }}, preparing to merge to main"

            # Create a temporary branch from main to merge into
            git checkout origin/main -b temp-main-for-merge

            # Set git identity for potential conflict resolution commits
            git config user.email "bot@webdriver.io"
            git config user.name "WebdriverIO Release Bot"

            # Try to merge the feature branch into the temp branch
            # Using --no-ff to ensure a merge commit is created
            if ! git merge --no-ff ${{ inputs.target_branch }} -m "feat: merge ${{ inputs.target_branch }} to main for v$(jq -r '.version' packages/wdio-electron-service/package.json) release [skip ci]"; then
              echo "::error::Merge conflict detected when merging ${{ inputs.target_branch }} to main"

              # Abort the merge
              git merge --abort

              # Create a detailed error message
              echo "::group::Merge Conflict Details"
              echo "The automated merge from ${{ inputs.target_branch }} to main failed due to conflicts."
              echo "Please resolve these conflicts manually by:"
              echo "1. Creating a PR from ${{ inputs.target_branch }} to main"
              echo "2. Resolving the conflicts in the PR"
              echo "3. Merging the PR"
              echo "4. Then run this release workflow again from the main branch"

              # Try to identify conflicting files to provide more context
              echo "Potential conflicting files:"
              git checkout ${{ inputs.target_branch }}
              FEATURE_FILES=$(git diff --name-only origin/main)
              git checkout origin/main
              MAIN_FILES=$(git diff --name-only ${{ inputs.target_branch }})
              echo "$FEATURE_FILES" | grep -f <(echo "$MAIN_FILES") || echo "Could not determine specific conflicting files"
              echo "::endgroup::"

              # Return to the original branch
              git checkout ${{ inputs.target_branch }}

              # Exit with error
              exit 1
            fi

            # If we get here, the merge was successful
            echo "Successfully merged ${{ inputs.target_branch }} to temp-main-for-merge"

            # We'll push this branch later in the push step

            # Set a flag to indicate successful merge
            echo "MERGE_SUCCESSFUL=true" >> $GITHUB_ENV

            # Return to the original branch for the rest of the release process
            git checkout ${{ inputs.target_branch }}
          else
            echo "Not on a feature branch, skipping merge to main"
          fi

          echo "::endgroup::"

      - name: üöÄ Push Branches
        id: push_tags
        shell: bash
        if: ${{ !inputs.dry_run }}
        run: |
          echo "::group::Git log"
          git log --oneline -n 5
          echo "::endgroup::"

          # If we merged a feature branch to main, push the main branch
          if [[ "${MERGE_SUCCESSFUL}" == "true" ]] && git rev-parse --verify --quiet "temp-main-for-merge" >/dev/null; then
            echo "Pushing merged main branch..."
            git checkout temp-main-for-merge
            git push --no-verify --force-with-lease origin temp-main-for-merge:main
            echo "‚úÖ Successfully pushed merged main branch"

            # Return to the original branch
            git checkout ${{ inputs.target_branch }}
          fi

      - name: üìã Log changes (dry run only)
        if: ${{ inputs.dry_run }}
        env:
          RELEASE_BRANCH: ${{ inputs.target_branch }}
        run: |
          git diff "origin/${RELEASE_BRANCH}"
          echo "DRY RUN: No changes were made."
