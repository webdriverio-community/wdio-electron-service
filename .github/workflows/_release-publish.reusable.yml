name: Publish Release

on:
  workflow_call:
    inputs:
      target_branch:
        description: 'Target branch to release from'
        required: true
        type: string
      release_version:
        description: 'Release type (patch, minor, major, prepatch, preminor, premajor, prerelease)'
        required: true
        type: string
      dry_run:
        description: 'Do not touch or write anything. Show the commands.'
        required: true
        default: false
        type: boolean
      branch_type:
        description: 'Branch type (main, feature, maintenance)'
        required: true
        type: string
    secrets:
      github_bot_token:
        description: 'GitHub token for authentication'
        required: true
      npm_token:
        description: 'NPM token for publishing packages'
        required: true
      deploy_key:
        description: 'SSH deploy key for pushing to the repository'
        required: true
    outputs:
      release_tag:
        description: 'The created release tag'
        value: ${{ jobs.publish.outputs.release_tag }}

jobs:
  publish:
    runs-on: ubuntu-latest
    outputs:
      release_tag: ${{ steps.push_tags.outputs.release_tag }}
    steps:
      - name: ⚖️ Define target branch
        id: define
        env:
          TARGET_BRANCH: ${{ inputs.target_branch }}
          IS_MAJOR: ${{ contains(inputs.release_version, 'major') }}
          IS_PRE_RELEASE: ${{ contains(inputs.release_version, 'pre') }}
        run: |
          if [ "${IS_MAJOR}" == 'true' -a "${IS_PRE_RELEASE}" == 'false' ]; then
            echo "target_branch=main"
            echo "target_branch=main" >>"${GITHUB_OUTPUT}"
          else
            echo "target_branch=${TARGET_BRANCH}"
            echo "target_branch=${TARGET_BRANCH}" >>"${GITHUB_OUTPUT}"
          fi

      - name: 👷 Checkout branch for tagging
        uses: actions/checkout@v4
        with:
          ssh-key: ${{ secrets.deploy_key }}
          # For maintenance releases, we tag directly on the maintenance branch
          # For all other releases, we tag on main
          ref: ${{steps.define.outputs.target_branch }}
          fetch-depth: 0 # Full history needed for versioning

      - name: 🛠️ Setup workspace
        uses: ./.github/workflows/actions/setup-workspace
        with:
          node-version: '20'

      - name: 🏗️ Build packages
        uses: ./.github/workflows/actions/build-verify

      - name: 📦 Configure NPM registry
        shell: bash
        run: |
          if [[ "${{ inputs.dry_run }}" == "true" ]]; then
            echo "DRY RUN: Would configure NPM registry for publishing"
          else
            # Set up NPM authentication for publishing
            pnpm set registry "https://registry.npmjs.org/"
            pnpm set //registry.npmjs.org/:_authToken ${{ secrets.npm_token }}
            pnpm whoami
          fi

      - name: 🏷️ Create Release and Tags
        # Uses package-versioner to bump versions and create git tags
        run: |
          if [[ "${{ inputs.dry_run }}" == "true" ]]; then
            # Get the current version
            CURRENT_VERSION=$(jq -r '.version' packages/wdio-electron-service/package.json)
            echo "Current version: $CURRENT_VERSION"

            # Run package-versioner in dry-run mode to calculate the next version
            echo "Running package-versioner to calculate the next version..."
            echo "DRY RUN: Would run command: pnpm dlx package-versioner --bump ${{ inputs.release_version }} --dry-run --json"
            NEW_VERSION=$(pnpm dlx package-versioner --bump ${{ inputs.release_version }} --dry-run --json | jq -r '.updates[0].newVersion')
            echo "Next version would be: $NEW_VERSION"

            # Show what would change
            echo "DRY RUN: Would create release and tags with command: pnpm dlx package-versioner --bump ${{ inputs.release_version }}"
            echo "DRY RUN: Would bump version from $CURRENT_VERSION to $NEW_VERSION"
            echo "DRY RUN: Would create git tag v$NEW_VERSION"

            # Reset any changes that might have been made
            git reset --hard
          else
            # Run package-versioner to calculate the next version
            echo "Running package-versioner to calculate the next version..."
            NEW_VERSION=$(pnpm dlx package-versioner --bump ${{ inputs.release_version }} --json | jq -r '.updates[0].newVersion')
          fi

          # Store the new version for later use
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: 📢 Publish to NPM
        shell: bash
        env:
          RELEASE_BRANCH: ${{ inputs.branch_type }}
        run: |
          # Use 'latest' tag for main branch releases, 'lts' for LTS branch releases
          test "${RELEASE_BRANCH}" == "main" && TAG="latest" || TAG="lts"

          if [[ "${{ inputs.dry_run }}" == "true" ]]; then
            # Get package names that would be published
            echo "DRY RUN: Would publish the following packages to NPM with tag '${TAG}':"
            PACKAGES=()
            while IFS= read -r pkg_json; do
              if [[ "$pkg_json" != *"node_modules"* ]]; then
                PKG_NAME=$(jq -r '.name' "$pkg_json")
                if [[ "$PKG_NAME" == @wdio/* || "$PKG_NAME" == wdio-* ]]; then
                  echo "  - $PKG_NAME@${NEW_VERSION}"
                  PACKAGES+=("$PKG_NAME")
                fi
              fi
            done < <(find packages -name "package.json" -maxdepth 2 -mindepth 2)

            echo "DRY RUN: Would publish to NPM with command: pnpx tsx scripts/publish.ts --tag ${TAG}"
          else
            if [[ "${{ github.repository }}" == "webdriverio-community/wdio-electron-service" ]]; then
              pnpx tsx scripts/publish.ts --tag ${TAG}
            else
              echo "Skipping actual publish because this is not the official repository"
            fi
          fi

      # Verify the published packages
      - name: 🔍 Verify published packages
        shell: bash
        run: |
          if [[ "${{ inputs.dry_run }}" == "true" ]]; then
            echo "DRY RUN: Would verify the following packages were published successfully:"
            PACKAGES=()
            while IFS= read -r pkg_json; do
              if [[ "$pkg_json" != *"node_modules"* ]]; then
                PKG_NAME=$(jq -r '.name' "$pkg_json")
                if [[ "$PKG_NAME" == @wdio/* || "$PKG_NAME" == wdio-* ]]; then
                  echo "  - $PKG_NAME@${NEW_VERSION}"
                  PACKAGES+=("$PKG_NAME")
                fi
              fi
            done < <(find packages -name "package.json" -maxdepth 2 -mindepth 2)

            echo "DRY RUN: Would wait for NPM to index the packages"
            echo "DRY RUN: Would poll NPM every 60 seconds for up to 10 minutes (10 attempts)"
            echo "DRY RUN: Would check each package exists on NPM with the expected version"
          else
            echo "::group::Verifying published packages"
            # Get the version that was just published
            VERSION=$(jq -r '.version' packages/wdio-electron-service/package.json)
            echo "Published version: $VERSION"
            # Dynamically get package names from package.json files
            PACKAGES=()
            while IFS= read -r pkg_json; do
              if [[ "$pkg_json" != *"node_modules"* ]]; then
                PKG_NAME=$(jq -r '.name' "$pkg_json")
                if [[ "$PKG_NAME" == @wdio/* || "$PKG_NAME" == wdio-* ]]; then
                  PACKAGES+=("$PKG_NAME")
                fi
              fi
            done < <(find packages -name "package.json" -maxdepth 2 -mindepth 2)
            echo "Found packages to verify: ${PACKAGES[*]}"
            # Set up polling for NPM indexing
            echo "Waiting for NPM to index the packages..."
            MAX_ATTEMPTS=10  # 10 attempts * 60 seconds = 10 minutes

            # Verify each package was published correctly
            for pkg in "${PACKAGES[@]}"; do
              echo "Verifying $pkg@$VERSION..."
              ATTEMPT=1
              VERIFIED=false

              while [ $ATTEMPT -le $MAX_ATTEMPTS ] && [ "$VERIFIED" = "false" ]; do
                echo "Attempt $ATTEMPT of $MAX_ATTEMPTS..."

                # Check if the package exists on NPM with the expected version
                if npm view "$pkg@$VERSION" version &>/dev/null; then
                  echo "✅ $pkg@$VERSION verified"
                  VERIFIED=true
                else
                  if [ $ATTEMPT -lt $MAX_ATTEMPTS ]; then
                    echo "Package $pkg@$VERSION not found on NPM yet. Waiting 60 seconds before retry..."
                    sleep 60
                  else
                    echo "::error::Package $pkg@$VERSION not found on NPM after $MAX_ATTEMPTS attempts (10 minutes)"
                    exit 1
                  fi
                  ATTEMPT=$((ATTEMPT + 1))
                fi
              done

              # Ensure the package was verified
              if [ "$VERIFIED" = "false" ]; then
                echo "::error::Failed to verify $pkg@$VERSION"
                exit 1
              fi
            done
            echo "All packages verified successfully"
            echo "::endgroup::"

            # Print a summary of verification results
            echo "::group::Verification Summary"
            echo "✅ Successfully verified all packages on NPM:"
            for pkg in "${PACKAGES[@]}"; do
              echo "  - $pkg@$VERSION"
            done
            echo "::endgroup::"
          fi

      - name: 🚀 Push Tags and Commits
        id: push_tags
        shell: bash
        run: |
          if [[ "${{ inputs.dry_run }}" == "true" ]]; then
            RELEASE_TAG="v${NEW_VERSION}"
            echo "DRY RUN: Would push tags and commits to remote repository"
            echo "DRY RUN: Would push tag $RELEASE_TAG"
            echo "DRY RUN: Would push branch ${{ inputs.target_branch }}"

            # For dry run, set the calculated release tag for downstream jobs
            echo "release_tag=$RELEASE_TAG" >>"${GITHUB_OUTPUT}"
            echo "DRY RUN: Set release_tag output to $RELEASE_TAG for downstream jobs"
          else
            echo "Git log:"
            git log --oneline -n 5
            # Get the most recent tag (the one we just created)
            RELEASE_TAG=$(git describe --tags $(git rev-list --tags --max-count=1))
            echo "Release tag: ${RELEASE_TAG}"
            echo "Pushing tags and commits..."
            # Push tags and commits without running the pre-push hook
            git push --tags --no-verify && git push --no-verify
            # Pass the release tag to the next step
            echo "release_tag=${RELEASE_TAG}" >>"${GITHUB_OUTPUT}"
          fi

      - name: 📝 Create GitHub Release
        if: ${{ !inputs.dry_run }}
        uses: softprops/action-gh-release@v2
        with:
          draft: true # Create as draft for manual review
          generate_release_notes: true
          prerelease: ${{ contains(inputs.release_version, 'pre') }}
          repository: ${{ github.repository }}
          tag_name: ${{ steps.push_tags.outputs.release_tag }}
          token: ${{ secrets.github_bot_token }}

      - name: 📋 Log GitHub Release (dry run only)
        if: ${{ inputs.dry_run }}
        run: |
          RELEASE_TAG="v${NEW_VERSION}"
          echo "DRY RUN: Would create a GitHub release with:"
          echo "  - Tag name: $RELEASE_TAG"
          echo "  - Draft: true"
          echo "  - Generate release notes: true"
          echo "  - Prerelease: ${{ contains(inputs.release_version, 'pre') }}"
          echo "  - Repository: ${{ github.repository }}"
          echo "  - Title: Release $RELEASE_TAG"
